================================================================================
                    COMPLETE SETUP GUIDE: WAVESHARE L76X GPS HAT
                           Raspberry Pi Configuration
================================================================================

OVERVIEW:
This guide provides complete step-by-step instructions to properly set up the 
Waveshare L76X GPS HAT on Raspberry Pi, including resolving Bluetooth conflicts 
and ensuring optimal GPS performance.

Based on successful troubleshooting session that identified:
- Bluetooth was blocking serial port access
- GPS HAT uses /dev/ttyAMA0 (not /dev/serial0)
- Complete Bluetooth removal required for reliable operation

================================================================================
SECTION 1: HARDWARE SETUP
================================================================================

STEP 1: PHYSICAL INSTALLATION
-----------------------------
1. Power off Raspberry Pi completely:
   sudo shutdown -h now

2. Remove power cable from Pi

3. Align GPS HAT with all 40 GPIO pins

4. Press down firmly ensuring all pins are seated properly

5. Connect GPS antenna to the connector on the HAT

6. Verify antenna connection is secure

7. Reconnect power to Raspberry Pi

STEP 2: HARDWARE VERIFICATION
-----------------------------
After powering on, verify the HAT is detected:

Commands to run:
ls -la /proc/device-tree/hat/
cat /proc/device-tree/hat/vendor
cat /proc/device-tree/hat/product

Expected Output:
vendor: waveshare
product: L76X GPS HAT

If HAT not detected:
- Power off and reseat HAT firmly
- Check all GPIO pins are properly connected
- Verify HAT is compatible with your Pi model

================================================================================
SECTION 2: SYSTEM CONFIGURATION
================================================================================

STEP 3: ENABLE UART AND CONFIGURE BOOT SETTINGS
-----------------------------------------------
1. Backup current config:
   sudo cp /boot/firmware/config.txt /boot/firmware/config.txt.backup

2. Edit boot configuration:
   sudo nano /boot/firmware/config.txt

3. Add these lines to /boot/firmware/config.txt:

# GPS L76X HAT Configuration
dtparam=uart0=on
enable_uart=1
dtoverlay=disable-bt

4. Save and exit (Ctrl+X, Y, Enter)

STEP 4: DISABLE CONSOLE ON SERIAL PORT
--------------------------------------
Disable serial console to free up the port:

sudo systemctl disable serial-getty@ttyAMA0.service
sudo systemctl disable serial-getty@serial0.service

================================================================================
SECTION 3: COMPLETE BLUETOOTH REMOVAL (CRITICAL STEP)
================================================================================

STEP 5: STOP AND DISABLE BLUETOOTH SERVICES
-------------------------------------------
Stop Bluetooth services immediately:
sudo systemctl stop bluetooth
sudo systemctl stop hciuart

Disable Bluetooth services permanently:
sudo systemctl disable bluetooth
sudo systemctl disable hciuart

Mask Bluetooth to prevent automatic restart:
sudo systemctl mask bluetooth

STEP 6: REMOVE BLUETOOTH PACKAGES (RECOMMENDED)
-----------------------------------------------
Remove Bluetooth packages completely:
sudo apt remove --purge bluez bluez-firmware pi-bluetooth
sudo apt autoremove

This ensures Bluetooth cannot interfere with GPS communication.

STEP 7: BLACKLIST BLUETOOTH MODULES
-----------------------------------
Create blacklist file for Bluetooth modules:
sudo nano /etc/modprobe.d/blacklist-bluetooth.conf

Add to the file:
# Blacklist Bluetooth modules for GPS HAT
blacklist btbcm
blacklist hci_uart
blacklist bluetooth

Save and exit (Ctrl+X, Y, Enter)

STEP 8: UPDATE BOOT COMMAND LINE
--------------------------------
Edit boot command line:
sudo nano /boot/firmware/cmdline.txt

Remove these parameters if present:
- console=serial0,115200
- console=ttyAMA0,115200

This prevents the kernel from using the serial port for console output.

================================================================================
SECTION 4: USER PERMISSIONS
================================================================================

STEP 9: ADD USER TO REQUIRED GROUPS
-----------------------------------
Add current user to dialout group:
sudo usermod -a -G dialout $USER

Verify group membership:
groups $USER

Expected output should include: dialout

Note: You may need to log out and log back in for group changes to take effect.

================================================================================
SECTION 5: SYSTEM RESTART AND VERIFICATION
================================================================================

STEP 10: REBOOT SYSTEM
----------------------
Reboot to apply all changes:
sudo reboot

STEP 11: VERIFY SERIAL PORT CONFIGURATION
-----------------------------------------
After reboot, check the serial port setup:

Check serial device links:
ls -la /dev/serial*
ls -la /dev/ttyAMA*

Verify no processes are using the serial port:
sudo lsof /dev/ttyAMA0
sudo fuser -v /dev/ttyAMA0

Check Bluetooth status (should be inactive):
sudo systemctl status bluetooth

Expected Results:
- /dev/serial0 should link to ttyAMA10 or similar
- /dev/ttyAMA0 should exist and be accessible
- No processes should be using the serial ports
- Bluetooth should be inactive/disabled

================================================================================
SECTION 6: SOFTWARE INSTALLATION
================================================================================

STEP 12: INSTALL REQUIRED PYTHON PACKAGES
-----------------------------------------
Update package list:
sudo apt update

Install Python and pip:
sudo apt install python3 python3-pip

Install required Python packages:
pip3 install pyserial requests

Verify installations:
python3 -c "import serial; print('PySerial:', serial.__version__)"
python3 -c "import requests; print('Requests:', requests.__version__)"

STEP 13: INSTALL GPS APPLICATION
--------------------------------
Navigate to your project directory:
cd /home/snakecharmerdata/Desktop/Explorer

Make the application executable:
chmod +x Main.py

Test the application:
python3 Main.py

================================================================================
SECTION 7: TESTING AND VERIFICATION
================================================================================

STEP 14: HARDWARE COMMUNICATION TEST
------------------------------------
Test GPS communication directly using the test script:
python3 gps_test.py

Expected Output:
✅ HAT Detected: waveshare L76X GPS HAT
✅ Device exists: /dev/ttyAMA0
✅ SUCCESS! GPS is communicating on /dev/ttyAMA0 at 9600 baud

If test fails:
- Check hardware connections
- Verify Bluetooth is completely disabled
- Ensure user is in dialout group

STEP 15: GPS APPLICATION TEST
----------------------------
1. Launch Application:
   python3 Main.py

2. In the GUI:
   - Enter your city in "City for GPS Assist" field
   - Click "Start GPS & Server"
   - Click "GPS Assist (A-GPS)"
   - Go outdoors and wait for GPS fix

3. Verify Success:
   - "GPS Fix: Valid" (green)
   - Latitude/Longitude coordinates appear
   - "Open Live Map" shows your location

================================================================================
SECTION 8: TROUBLESHOOTING COMMON ISSUES
================================================================================

ISSUE 1: "Device busy" or "Permission denied"
---------------------------------------------
Check what's using the serial port:
sudo lsof /dev/ttyAMA0
sudo fuser -k /dev/ttyAMA0

Reset serial port:
sudo stty -F /dev/ttyAMA0 raw 9600

Restart application

ISSUE 2: Bluetooth keeps restarting
-----------------------------------
Force stop and mask Bluetooth:
sudo systemctl stop bluetooth
sudo systemctl mask bluetooth
sudo killall bluetoothd

Verify it's stopped:
sudo systemctl status bluetooth

ISSUE 3: No GPS data received
-----------------------------
Check hardware detection:
cat /proc/device-tree/hat/product

Test serial communication:
timeout 10 sudo cat /dev/ttyAMA0

Check antenna connection and go outdoors

ISSUE 4: GPS very slow to get fix
---------------------------------
1. Use GPS Assist (A-GPS):
   - Enter your city name
   - Click "GPS Assist (A-GPS)"
   - Wait 30-60 seconds instead of 15+ minutes

2. Ensure optimal conditions:
   - Go outdoors with clear sky view
   - Away from tall buildings
   - Check antenna connection

ISSUE 5: Application won't start
--------------------------------
Check Python dependencies:
pip3 install pyserial requests tkinter

Check file permissions:
chmod +x Main.py

Run with verbose output:
python3 -v Main.py

================================================================================
SECTION 9: CONFIGURATION SUMMARY
================================================================================

FILES MODIFIED:
- /boot/firmware/config.txt - UART and Bluetooth settings
- /boot/firmware/cmdline.txt - Remove serial console
- /etc/modprobe.d/blacklist-bluetooth.conf - Blacklist Bluetooth

SERVICES DISABLED:
- bluetooth.service
- hciuart.service
- serial-getty@ttyAMA0.service

KEY SETTINGS:
- UART enabled: dtparam=uart0=on
- Serial enabled: enable_uart=1
- Bluetooth disabled: dtoverlay=disable-bt
- User in dialout group

CRITICAL DISCOVERY FROM TROUBLESHOOTING:
- GPS HAT uses /dev/ttyAMA0 (NOT /dev/serial0)
- Bluetooth was blocking serial port access
- Complete Bluetooth removal required for reliable operation

================================================================================
SECTION 10: VERIFICATION CHECKLIST
================================================================================

BEFORE USING GPS:
[ ] GPS HAT physically installed and secure
[ ] GPS antenna connected
[ ] UART enabled in config.txt
[ ] Bluetooth completely disabled and removed
[ ] User in dialout group
[ ] PySerial installed
[ ] System rebooted after changes

GPS APPLICATION READY:
[ ] Hardware test passes (gps_test.py)
[ ] GPS application starts without errors
[ ] Can enter city for GPS assist
[ ] Serial port communication working (/dev/ttyAMA0)
[ ] Ready for outdoor GPS testing

================================================================================
SECTION 11: USAGE INSTRUCTIONS
================================================================================

FOR STUDENTS WORLDWIDE:
1. Enter Your City: "Tokyo, Japan", "London, UK", "Cairo, Egypt", etc.
2. Use GPS Assist: Click "GPS Assist (A-GPS)" for faster acquisition
3. Go Outdoors: GPS requires clear sky view
4. Be Patient: First fix takes 30-60 seconds with assist, 2-15 minutes without
5. View Live Map: Real-time location tracking and movement

EDUCATIONAL BENEFITS:
- Learn GPS satellite technology
- Understand NMEA data protocols
- Experience real-time positioning
- Practice hardware troubleshooting
- Global coordinate systems
- Location-based applications

PERFORMANCE EXPECTATIONS:
- With A-GPS: 30-60 seconds to first fix
- Without A-GPS: 2-15 minutes to first fix
- Accuracy: 2-5 meters typical
- Update Rate: 1 second (1Hz)

================================================================================
SECTION 12: EMERGENCY RECOVERY
================================================================================

IF SOMETHING GOES WRONG:
Complete reset procedure:
sudo systemctl unmask bluetooth  # If you need Bluetooth back
sudo cp /boot/firmware/config.txt.backup /boot/firmware/config.txt
sudo reboot

Or restore original Bluetooth functionality:
sudo apt install bluez bluez-firmware pi-bluetooth
sudo systemctl enable bluetooth
sudo reboot

FORCE STOP ALL GPS PROCESSES:
Use the "Force Stop All" button in the GPS application, or:
pkill -f python3.*Main.py
sudo fuser -k 5000/tcp

================================================================================
SECTION 13: SUCCESS INDICATORS
================================================================================

YOU'LL KNOW IT'S WORKING WHEN:
- GPS application starts without errors
- "GPS Fix: Valid" appears (green)
- Coordinates show your actual location
- Live map displays your position accurately
- Movement tracking works in real-time
- Raw GPS data shows NMEA sentences

TROUBLESHOOTING TOOLS IN APPLICATION:
- "Run Diagnostics" - System health check
- "Check GPS Status" - Satellite information
- "Show Raw GPS Data" - NMEA sentences
- "📖 Instructions" - Complete help system
- System Log - Detailed activity tracking

================================================================================
SECTION 14: SUPPORT RESOURCES
================================================================================

DOCUMENTATION:
- Waveshare L76X GPS HAT Wiki
- Raspberry Pi GPIO documentation
- NMEA 0183 protocol specification

TROUBLESHOOTING:
- Use "Run Diagnostics" in GPS application
- Check "System Log" for error messages
- Use "📖 Instructions" in application for detailed help

COMMUNITY:
- Raspberry Pi Forums
- Waveshare support forums
- GPS/GNSS technical communities

================================================================================
FINAL NOTES
================================================================================

This setup guide is based on successful resolution of Bluetooth conflicts that
were preventing GPS operation. The key discoveries were:

1. Bluetooth was using the serial port needed by GPS
2. GPS HAT actually uses /dev/ttyAMA0, not /dev/serial0
3. Complete Bluetooth removal (not just disabling) was required
4. GPS Assist (A-GPS) dramatically improves acquisition time

Following this guide ensures your Waveshare L76X GPS HAT works perfectly with
complete Bluetooth removal for optimal GPS performance.

The GPS application includes comprehensive diagnostics and help systems to
assist with any issues that may arise.

For educational use, this setup provides students worldwide with a reliable
GPS learning platform that works in any country with proper city assistance.

================================================================================
END OF SETUP GUIDE
================================================================================